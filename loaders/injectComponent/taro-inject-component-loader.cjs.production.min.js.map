{"version":3,"file":"taro-inject-component-loader.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import generate from '@babel/generator'\r\nimport traverse from '@babel/traverse'\r\nimport utils from '@babel/types'\r\nimport { parse } from '@babel/parser'\r\nimport { getOptions } from 'loader-utils'\r\nimport { validate } from 'schema-utils'\r\n\r\nconst schema = {\r\n  type: 'object',\r\n  properties: {\r\n    importPath: {\r\n      type: 'string',\r\n    },\r\n    isPage: {\r\n      instanceof: 'Function',\r\n    },\r\n    componentName: {\r\n      type: 'string',\r\n    },\r\n  },\r\n  additionalProperties: false,\r\n}\r\n\r\nexport default function (source: string) {\r\n  // @ts-ignore\r\n  const webpackEnv = this\r\n\r\n  const options = getOptions(webpackEnv)\r\n\r\n  validate(schema as any, options, { name: 'taro-inject-component-loader' })\r\n\r\n  const { importPath = '', componentName = 'WebpackInjected', isPage = defaultJudgePage } = options || {}\r\n\r\n  // 获取原始文件地址\r\n  const filePath = webpackEnv.resourcePath\r\n\r\n  if (typeof isPage === 'function' && isPage(filePath)) {\r\n    // 生成 AST\r\n    const ast: any = parse(source, {\r\n      sourceType: 'module',\r\n      plugins: ['jsx', 'typescript', 'classProperties'],\r\n    })\r\n\r\n    // 如果有导入申明，则默认表示已手动导入了组件\r\n    let insert = false\r\n\r\n    // 保存所有顶层的声明\r\n    const declarations = new Map()\r\n\r\n    traverse(ast, {\r\n      // 查找是否有导入\r\n      ImportDeclaration(path) {\r\n        if (path.node.source.value === importPath) {\r\n          insert = true\r\n        }\r\n      },\r\n\r\n      // 收集页面文件里的所有申明\r\n      // 类组件\r\n      ClassDeclaration(path) {\r\n        // 如果不是顶层的申明，则直接返回\r\n        if (path.parent.type !== 'Program') return\r\n\r\n        const type = path.node.type\r\n        const name = path.node.id.name\r\n        declarations.set(name, type)\r\n      },\r\n\r\n      // 函数申明\r\n      FunctionDeclaration(path) {\r\n        // 如果不是顶层的申明，则直接返回\r\n        if (path.parent.type !== 'Program') return\r\n\r\n        const type = path.node.type\r\n        const name = path.node.id?.name\r\n        if (!name) return\r\n\r\n        declarations.set(name, type)\r\n      },\r\n\r\n      // 表达式申明\r\n      VariableDeclaration(path) {\r\n        // 如果不是顶层的申明，则直接返回\r\n        if (path.parent.type !== 'Program') return\r\n\r\n        path.node.declarations.forEach((declaration: any) => {\r\n\r\n          // const a = () => {}\r\n          if (declaration.init?.type === 'ArrowFunctionExpression') {\r\n            const type = declaration.init?.type\r\n            const name = declaration.id?.name\r\n            declarations.set(name, type)\r\n          }\r\n\r\n          // const a = function(){}\r\n          if (declaration.init?.type === 'FunctionExpression') {\r\n            const type = declaration.init.type\r\n            const name = declaration.id.name\r\n            declarations.set(name, type)\r\n          }\r\n\r\n          // const a = class {}\r\n          if (declaration.init?.type === 'ClassExpression') {\r\n            const type = declaration.init.type\r\n            const name = declaration.id.name\r\n            declarations.set(name, type)\r\n          }\r\n        })\r\n      },\r\n    })\r\n\r\n    if (!insert) {\r\n      // 记录组件插入状态\r\n      const state = {\r\n        importedDeclaration: false,\r\n        importedComponent: false,\r\n      }\r\n\r\n      traverse(ast, {\r\n        // 添加申明\r\n        ImportDeclaration(path) {\r\n          if (!state.importedDeclaration) {\r\n            state.importedDeclaration = true\r\n            path.insertBefore(\r\n              utils.importDeclaration(\r\n                [\r\n                  utils.importDefaultSpecifier(utils.identifier('' + componentName)),\r\n                ],\r\n                utils.stringLiteral('' + importPath),\r\n              ),\r\n            )\r\n          }\r\n        },\r\n\r\n        // 默认导出的为页面组件\r\n        ExportDefaultDeclaration(path) {\r\n\r\n          // 如果默认导出的是函数\r\n          if (path.node.declaration.type === 'FunctionDeclaration') {\r\n            const mainFnBody = path.node.declaration.body.body\r\n            const length = mainFnBody.length\r\n            const last = mainFnBody[length - 1]\r\n            insertComponent(last, '' + componentName, state)\r\n          }\r\n\r\n          // 默认导出箭头函数\r\n          if (path.node.declaration.type === 'ArrowFunctionExpression') {\r\n            // export default () => { return <View></View> }\r\n            if (path.node.declaration.body.type === 'BlockStatement') {\r\n              const mainFnBody = path.node.declaration.body.body\r\n              const length = mainFnBody.length\r\n              const last = mainFnBody[length - 1]\r\n              insertComponent(last, '' + componentName, state)\r\n            } else {\r\n              // export default () => <View></View>\r\n              insertComponent(path.node.declaration.body, '' + componentName, state)\r\n            }\r\n          }\r\n\r\n          // 默认导出类\r\n          if (path.node.declaration.type === 'ClassDeclaration') {\r\n            traverse(path.node, {\r\n              ClassMethod(path) {\r\n                if ((path.node.key as any).name === 'render') {\r\n                  const body = path.node.body.body || []\r\n                  const last = body[body.length - 1]\r\n                  insertComponent(last, '' + componentName, state)\r\n                  return\r\n                }\r\n              },\r\n            }, path.scope, path)\r\n          }\r\n\r\n          // 如果默认导出的是一个申明\r\n          if (path.node.declaration.type === \"Identifier\") {\r\n            const name = path.node.declaration.name\r\n            const componentType = declarations.get(name)\r\n\r\n            traverse(path.parent, {\r\n              FunctionDeclaration(path) {\r\n                if (path.node.id?.name !== name) return\r\n                const mainFnBody = path.node?.body?.body\r\n                const length = mainFnBody.length\r\n                const last = mainFnBody[length - 1]\r\n                insertComponent(last, '' + componentName, state)\r\n              },\r\n              ClassDeclaration(path) {\r\n                if (path.node.id.name !== name) return\r\n                traverse(path.node, {\r\n                  ClassMethod(path) {\r\n                    if ((path.node.key as any)?.name !== 'render') return\r\n                    const body = path.node.body.body || []\r\n                    const last = body[body.length - 1]\r\n                    insertComponent(last, '' + componentName, state)\r\n                  },\r\n                }, path.scope, path)\r\n              },\r\n              VariableDeclarator(path) {\r\n                if (path.node.id.type !== 'Identifier') return\r\n                if (path.node.id.name !== name) return\r\n                if (!path.node.init) return\r\n\r\n                if (path.node.init.type !== componentType) return\r\n\r\n                if (path.node.init.type === 'FunctionExpression') {\r\n                  const mainFnBody = path.node.init.body.body\r\n                  const length = mainFnBody.length\r\n                  const last = mainFnBody[length - 1]\r\n                  insertComponent(last, '' + componentName, state)\r\n                }\r\n\r\n                if (path.node.init.type === 'ClassExpression') {\r\n                  traverse(path.node, {\r\n                    ClassMethod(path) {\r\n                      if ((path.node.key as any).name !== 'render') return\r\n                      const body = path.node.body.body || []\r\n                      const last = body[body.length - 1]\r\n                      insertComponent(last, '' + componentName, state)\r\n                    },\r\n                  }, path.scope, path)\r\n                }\r\n\r\n                if (path.node.init.type === 'ArrowFunctionExpression') {\r\n                  // const A = () => {}\r\n                  // export default A\r\n                  if (path.node.init.body.type == 'BlockStatement') {\r\n                    const mainFnBody = path.node.init.body.body\r\n                    const length = mainFnBody.length\r\n                    const last = mainFnBody[length - 1]\r\n                    insertComponent(last, '' + componentName, state)\r\n                  } else {\r\n                    // const A = () => <div></div>\r\n                    // export default A\r\n                    insertComponent(path.node.init.body, '' + componentName, state)\r\n                  }\r\n                }\r\n              }\r\n            })\r\n          }\r\n        },\r\n      })\r\n\r\n      if (!state.importedComponent) {\r\n        webpackEnv.emitWarning(`页面: ${filePath} 注入组件失败，建议手动引入组件。组件注入限制请查阅: https://github.com/xdoer/taro-inject-component-loader`)\r\n\r\n      }\r\n      if (!state.importedDeclaration) {\r\n        webpackEnv.emitWarning(`页面: ${filePath} 注入导入申明失败，建议手动引入组件。组件注入限制请查阅: https://github.com/xdoer/taro-inject-component-loader`)\r\n      }\r\n\r\n      source = generate(ast).code\r\n    }\r\n  }\r\n\r\n  return source\r\n}\r\n\r\n\r\nfunction createElement(name: string) {\r\n  const reactIdentifier = utils.identifier('React')\r\n  const createElementIdentifier = utils.identifier('createElement')\r\n  const callee = utils.memberExpression(reactIdentifier, createElementIdentifier)\r\n  return utils.callExpression(callee, [utils.identifier(name)])\r\n}\r\n\r\nfunction createJSX(name: string) {\r\n  return utils.jSXElement(\r\n    utils.jSXOpeningElement(utils.jsxIdentifier('' + name), [], true),\r\n    null,\r\n    [],\r\n    true,\r\n  )\r\n}\r\n\r\nfunction insertComponent(node: any, componentName: string, state: any) {\r\n  if (node?.type === 'ReturnStatement') {\r\n    // createElement\r\n    if (node.argument?.callee?.property?.name === 'createElement' && !state.importedComponent) {\r\n      state.importedComponent = true\r\n      const reactCreateArguments = node.argument.arguments\r\n      reactCreateArguments.push(createElement(componentName))\r\n    }\r\n    // JSX\r\n    if (node.argument?.type === 'JSXElement' && !state.importedComponent) {\r\n      state.importedComponent = true\r\n      node.argument.children.push(createJSX(componentName))\r\n    }\r\n  }\r\n  if (node.type === 'JSXElement' && !state.importedComponent) {\r\n    state.importedComponent = true\r\n    node.children.push(createJSX(componentName))\r\n  }\r\n}\r\n\r\nfunction defaultJudgePage(filePath: string) {\r\n  // 兼容 windows 路径\r\n  const formatFilePath = filePath.replace(/\\\\/g, '/')\r\n  return /(package-.+\\/)?pages\\/[A-Za-z0-9-]+\\/index\\.[tj]sx$/.test(formatFilePath)\r\n}\r\n"],"names":["schema","type","properties","importPath","isPage","componentName","additionalProperties","createJSX","name","utils","jSXElement","jSXOpeningElement","jsxIdentifier","insertComponent","node","state","reactIdentifier","createElementIdentifier","callee","argument","property","importedComponent","arguments","push","identifier","memberExpression","callExpression","children","defaultJudgePage","filePath","formatFilePath","replace","test","source","options","getOptions","this","validate","resourcePath","ast","parse","sourceType","plugins","insert","declarations","Map","traverse","ImportDeclaration","path","value","ClassDeclaration","parent","set","id","FunctionDeclaration","_path$node$id","VariableDeclaration","forEach","declaration","init","_declaration$init2","_declaration$id","importedDeclaration","insertBefore","importDeclaration","importDefaultSpecifier","stringLiteral","ExportDefaultDeclaration","mainFnBody","body","length","ClassMethod","key","scope","componentType","get","_path$node","_path$node$body","VariableDeclarator","emitWarning","generate","code"],"mappings":"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"}